{"ast":null,"code":"import { FETCH_VOTES, NEW_VOTE, SELECT_VOTES, CLEAR_VOTE_SELECTION } from './types';\nimport { API } from '../containers/MainPage';\nexport const fetchVotes = () => dispatch => {\n  fetch(API + 'votes').then(res => res.json()).then(votes => dispatch({\n    type: FETCH_VOTES,\n    payload: votes\n  }));\n};\nexport const createVote = (postID, e) => async dispatch => {\n  const token = localStorage.getItem('user-token');\n  let placeHolder;\n  e === 'up' ? await fetch(API + 'votes', {\n    method: 'POST',\n    headers: {\n      Authorization: \"Bearer \".concat(token),\n      'Content-Type': 'application/json',\n      Accept: 'application/json'\n    },\n    body: JSON.stringify({\n      vote: {\n        post_id: postID,\n        user_id: currentUser.user.id,\n        is_down_vote: false\n      }\n    })\n  }).then(res => res.json()).then(vote => {\n    vote.message ? placeHolder = vote.votes : placeHolder = vote;\n  }) : await fetch(API + 'votes/delete', {\n    method: 'POST',\n    headers: {\n      Authorization: \"Bearer \".concat(token),\n      'Content-Type': 'application/json',\n      Accept: 'application/json'\n    },\n    body: JSON.stringify({\n      vote: {\n        post_id: postID,\n        user_id: currentUser.user.id,\n        is_down_vote: true\n      }\n    })\n  }).then(res => res.json()).then(vote => {\n    vote.message ? placeHolder = vote.votes : placeHolder = vote;\n  });\n  await this.setState({\n    votes: placeHolder,\n    updateBool: true\n  });\n};","map":{"version":3,"sources":["/Users/andershornor/Class_Work/ReadThat1/client/src/actions/voteActions.jsx"],"names":["FETCH_VOTES","NEW_VOTE","SELECT_VOTES","CLEAR_VOTE_SELECTION","API","fetchVotes","dispatch","fetch","then","res","json","votes","type","payload","createVote","postID","e","token","localStorage","getItem","placeHolder","method","headers","Authorization","Accept","body","JSON","stringify","vote","post_id","user_id","currentUser","user","id","is_down_vote","message","setState","updateBool"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,EAAgCC,YAAhC,EAA8CC,oBAA9C,QAA0E,SAA1E;AACA,SAASC,GAAT,QAAoB,wBAApB;AAEI,OAAO,MAAMC,UAAU,GAAG,MAAMC,QAAQ,IAAI;AACxCC,EAAAA,KAAK,CAACH,GAAG,GAAG,OAAP,CAAL,CACKI,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUG,KAAK,IAAIL,QAAQ,CAAC;AACpBM,IAAAA,IAAI,EAAEZ,WADc;AAEpBa,IAAAA,OAAO,EAAEF;AAFW,GAAD,CAF3B;AAMH,CAPM;AAQP,OAAO,MAAMG,UAAU,GAAG,CAACC,MAAD,EAASC,CAAT,KAAe,MAAOV,QAAP,IAAoB;AACzD,QAAMW,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAd;AACA,MAAIC,WAAJ;AACNJ,EAAAA,CAAC,KAAK,IAAN,GAEC,MAAMT,KAAK,CAACH,GAAG,GAAG,OAAP,EAAgB;AACzBiB,IAAAA,MAAM,EAAE,MADiB;AAEzBC,IAAAA,OAAO,EAAE;AACRC,MAAAA,aAAa,mBAAYN,KAAZ,CADL;AAER,sBAAgB,kBAFR;AAGRO,MAAAA,MAAM,EAAE;AAHA,KAFgB;AAOzBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,OAAO,EAAEd,MAAX;AAAmBe,QAAAA,OAAO,EAAEC,WAAW,CAACC,IAAZ,CAAiBC,EAA7C;AAAiDC,QAAAA,YAAY,EAAE;AAA/D;AAAR,KAAf;AAPmB,GAAhB,CAAL,CASH1B,IATG,CASEC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EATT,EAUHF,IAVG,CAUEoB,IAAI,IAAI;AACbA,IAAAA,IAAI,CAACO,OAAL,GACAf,WAAW,GAAGQ,IAAI,CAACjB,KADnB,GAGAS,WAAW,GAAGQ,IAHd;AAIA,GAfG,CAFP,GAmBC,MAAMrB,KAAK,CAACH,GAAG,GAAG,cAAP,EAAuB;AAChCiB,IAAAA,MAAM,EAAE,MADwB;AAEhCC,IAAAA,OAAO,EAAE;AACRC,MAAAA,aAAa,mBAAYN,KAAZ,CADL;AAER,sBAAgB,kBAFR;AAGRO,MAAAA,MAAM,EAAE;AAHA,KAFuB;AAOhCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,OAAO,EAAEd,MAAX;AAAmBe,QAAAA,OAAO,EAAEC,WAAW,CAACC,IAAZ,CAAiBC,EAA7C;AAAiDC,QAAAA,YAAY,EAAE;AAA/D;AAAR,KAAf;AAP0B,GAAvB,CAAL,CASH1B,IATG,CASEC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EATT,EAUHF,IAVG,CAUGoB,IAAI,IACV;AACAA,IAAAA,IAAI,CAACO,OAAL,GACAf,WAAW,GAAGQ,IAAI,CAACjB,KADnB,GAGAS,WAAW,GAAGQ,IAHd;AAIA,GAhBG,CAnBP;AAqCE,QAAM,KAAKQ,QAAL,CAAc;AAAEzB,IAAAA,KAAK,EAAES,WAAT;AAAsBiB,IAAAA,UAAU,EAAC;AAAjC,GAAd,CAAN;AACF,CAzCS","sourcesContent":["import { FETCH_VOTES, NEW_VOTE, SELECT_VOTES, CLEAR_VOTE_SELECTION } from './types'\nimport { API } from '../containers/MainPage'\n\n    export const fetchVotes = () => dispatch => {\n        fetch(API + 'votes')\n            .then(res => res.json())\n            .then(votes => dispatch({ \n                type: FETCH_VOTES,\n                payload: votes })\n            );\n    }\n    export const createVote = (postID, e) => async (dispatch) => {\n        const token = localStorage.getItem('user-token')\n        let placeHolder;\n\t\te === 'up'\n\t\t\t? \n\t\t\tawait fetch(API + 'votes', {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t\t\t\t'Content-Type': 'application/json',\t\n\t\t\t\t\t\tAccept: 'application/json'\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify({ vote: { post_id: postID, user_id: currentUser.user.id, is_down_vote: false } })\n\t\t\t  })\n\t\t\t\t\t.then(res => res.json())\n\t\t\t\t\t.then(vote => {\n\t\t\t\t\t\tvote.message ? \n\t\t\t\t\t\tplaceHolder = vote.votes\n\t\t\t\t\t\t: \n\t\t\t\t\t\tplaceHolder = vote;\n\t\t\t\t\t})\n\t\t\t: \n\t\t\tawait fetch(API + 'votes/delete', {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\tAccept: 'application/json'\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify({ vote: { post_id: postID, user_id: currentUser.user.id, is_down_vote: true } })\n\t\t\t  })\n\t\t\t\t\t.then(res => res.json())\n\t\t\t\t\t.then( vote =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\tvote.message ? \n\t\t\t\t\t\tplaceHolder = vote.votes\n\t\t\t\t\t\t:\n\t\t\t\t\t\tplaceHolder = vote\n\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\tawait this.setState({ votes: placeHolder, updateBool:true})\n\t};"]},"metadata":{},"sourceType":"module"}