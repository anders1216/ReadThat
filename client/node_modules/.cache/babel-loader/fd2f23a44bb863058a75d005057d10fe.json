{"ast":null,"code":"import { FETCH_POSTS, NEW_POST, SELECT_POSTS, CLEAR_POST_SELECTION } from './types';\nimport { API } from '../containers/MainPage';\nexport const fetchPosts = () => async (dispatch, getState) => {\n  const selectedCategories = getState().categories.selectedCategories;\n  const token = localStorage.getItem('user-token');\n  await dispatch({\n    type: CLEAR_POST_SELECTION\n  });\n\n  if (selectedCategories.length < 1) {\n    fetch(API + 'posts', {\n      headers: {\n        Authorization: \"Bearer \".concat(token)\n      }\n    }).then(res => res.json()).then(posts => dispatch({\n      type: FETCH_POSTS,\n      payload: posts\n    }));\n  } else {\n    selectedCategories.forEach(category => {\n      fetch(API + 'categories/' + \"\".concat(category.value), {\n        headers: {\n          Authorization: \"Bearer \".concat(token)\n        }\n      }).then(res => res.json()).then(posts => dispatch({\n        type: SELECT_POSTS,\n        payload: posts\n      }));\n    });\n  }\n};\nexport const createPost = post => async dispatch => {\n  const token = localStorage.getItem('user-token');\n  await fetch(API + 'posts', {\n    method: 'POST',\n    headers: {\n      Authorization: \"Bearer \".concat(token),\n      'Content-type': 'Application/JSON'\n    },\n    body: JSON.stringify({\n      post: post\n    })\n  }).then(res => res.json()).then(post => post.errors ? window.alert(post.errors) : dispatch({\n    type: NEW_POST,\n    payload: post\n  }));\n  fetchPosts();\n};","map":{"version":3,"sources":["/Users/andershornor/Class_Work/ReadThat1/client/src/actions/postActions.jsx"],"names":["FETCH_POSTS","NEW_POST","SELECT_POSTS","CLEAR_POST_SELECTION","API","fetchPosts","dispatch","getState","selectedCategories","categories","token","localStorage","getItem","type","length","fetch","headers","Authorization","then","res","json","posts","payload","forEach","category","value","createPost","post","method","body","JSON","stringify","errors","window","alert"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,EAAgCC,YAAhC,EAA8CC,oBAA9C,QAA0E,SAA1E;AACA,SAASC,GAAT,QAAoB,wBAApB;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAAA,QACpDC,kBADoD,GAC7BD,QAAQ,GAAGE,UADkB,CACpDD,kBADoD;AAEtD,QAAME,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAd;AACA,QAAMN,QAAQ,CAAC;AACXO,IAAAA,IAAI,EAAEV;AADK,GAAD,CAAd;;AAGN,MAAIK,kBAAkB,CAACM,MAAnB,GAA4B,CAAhC,EAAmC;AAClCC,IAAAA,KAAK,CAACX,GAAG,GAAG,OAAP,EAAgB;AACpBY,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,mBAAYP,KAAZ;AAAf;AADW,KAAhB,CAAL,CAGEQ,IAHF,CAGOC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAHd,EAIEF,IAJF,CAIOG,KAAK,IAAIf,QAAQ,CAAC;AACRO,MAAAA,IAAI,EAAEb,WADE;AAERsB,MAAAA,OAAO,EAAED;AAFD,KAAD,CAJxB;AAQA,GATD,MASO;AACGb,IAAAA,kBAAkB,CAACe,OAAnB,CAA2BC,QAAQ,IAAI;AAC/CT,MAAAA,KAAK,CAACX,GAAG,GAAG,aAAN,aAAyBoB,QAAQ,CAACC,KAAlC,CAAD,EAA4C;AAChDT,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,mBAAYP,KAAZ;AAAf;AADuC,OAA5C,CAAL,CAGiBQ,IAHjB,CAGsBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAH7B,EAIiBF,IAJjB,CAIsBG,KAAK,IAAIf,QAAQ,CAAC;AACpBO,QAAAA,IAAI,EAAEX,YADc;AAEpBoB,QAAAA,OAAO,EAAED;AAFW,OAAD,CAJvC;AAOS,KARD;AAUT;AACE,CA3BE;AA6BP,OAAO,MAAMK,UAAU,GAAIC,IAAD,IAAU,MAAOrB,QAAP,IAAoB;AACpD,QAAMI,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAd;AACA,QAAMG,KAAK,CAACX,GAAG,GAAG,OAAP,EAAgB;AACvBwB,IAAAA,MAAM,EAAE,MADe;AAEvBZ,IAAAA,OAAO,EAAE;AACLC,MAAAA,aAAa,mBAAYP,KAAZ,CADR;AAEL,sBAAgB;AAFX,KAFc;AAMvBmB,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACJ,MAAAA,IAAI,EAAEA;AAAP,KAAf;AANiB,GAAhB,CAAL,CAQLT,IARK,CAQAC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EARP,EASLF,IATK,CASAS,IAAI,IAAIA,IAAI,CAACK,MAAL,GAAcC,MAAM,CAACC,KAAP,CAAaP,IAAI,CAACK,MAAlB,CAAd,GAA0C1B,QAAQ,CAAC;AAC7DO,IAAAA,IAAI,EAAEZ,QADuD;AAE7DqB,IAAAA,OAAO,EAAEK;AAFoD,GAAD,CAT1D,CAAN;AAaDtB,EAAAA,UAAU;AACZ,CAhBM","sourcesContent":["import { FETCH_POSTS, NEW_POST, SELECT_POSTS, CLEAR_POST_SELECTION } from './types'\nimport { API } from '../containers/MainPage'\n\nexport const fetchPosts = () => async (dispatch, getState) => {\n\t\tconst { selectedCategories } = getState().categories;\n        const token = localStorage.getItem('user-token');\n        await dispatch({\n            type: CLEAR_POST_SELECTION,\n        })\n\t\tif (selectedCategories.length < 1) {\n\t\t\tfetch(API + 'posts', {\n\t\t\t\theaders: { Authorization: `Bearer ${token}` }\n\t\t\t})\n\t\t\t\t.then(res => res.json())\n\t\t\t\t.then(posts => dispatch({\n                    type: FETCH_POSTS,\n                    payload: posts\n                }));\n\t\t} else {\n            selectedCategories.forEach(category => {\n\t\t\t\tfetch(API + 'categories/' + `${category.value}`, {\n\t\t\t\t\theaders: { Authorization: `Bearer ${token}` }\n\t\t\t\t})\n                    .then(res => res.json())\n                    .then(posts => dispatch({\n                        type: SELECT_POSTS,\n                        payload: posts}))   \n            })\n \n\t\t}\n    };\n\nexport const createPost = (post) => async (dispatch) => {\n    const token = localStorage.getItem('user-token')\n    await fetch(API + 'posts', {\n        method: 'POST',\n        headers: { \n            Authorization: `Bearer ${token}`,\n            'Content-type': 'Application/JSON',\n        },\n        body: JSON.stringify({post: post})\n    })\n    .then(res => res.json())\n    .then(post => post.errors ? window.alert(post.errors) : dispatch({\n        type: NEW_POST,\n        payload: post\n    }))\n   fetchPosts() \n} "]},"metadata":{},"sourceType":"module"}