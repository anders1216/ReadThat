{"ast":null,"code":"import { NEW_USER, USER_LOGIN, USER_LOGOUT, PAGE_RELOAD } from '../actions/types';\nimport { API } from '../containers/MainPage';\nexport const pageReload = () => dispatch => {\n  const _localStorage$getItem = localStorage.getItem('user-token'),\n        token = _localStorage$getItem.token;\n\n  if (token !== \"undefined\" && token !== null) {\n    fetch(\"\".concat(API, \"users/current_user\"), {\n      headers: {\n        'Authorization': \"Bearer \".concat(token) // 'Content-Type': 'application/json',\n        // Accept: 'application/json'\n\n      }\n    }).then(res => res.json()).then(res => dispatch({\n      type: PAGE_RELOAD,\n      payload: {\n        currentUser: res,\n        isLoggedIn: true,\n        token: res.token\n      }\n    }));\n  }\n};\nexport const userLogin = () => async dispatch => {\n  const _this$state = this.state,\n        username = _this$state.username,\n        password = _this$state.password;\n  e.preventDefault();\n  await fetch(API + 'login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json'\n    },\n    body: JSON.stringify({\n      user: {\n        username: username,\n        password: password\n      }\n    })\n  }).then(res => res.json()).then(res => {\n    res.errors ? alert(res.errors) : this.setState({\n      currentUser: res,\n      isLoggedIn: true,\n      token: res.token,\n      password: '',\n      passwordConfirmation: ''\n    });\n  });\n\n  if (this.state.token !== null) {\n    localStorage.setItem('user-token', this.state.token);\n  }\n};\nexport const userLogout = () => dispatch => {\n  localStorage.clear();\n  dispatch({\n    type: USER_LOGOUT,\n    payload: {\n      isLoggedIn: false\n    }\n  });\n};\nexport const newUser = () => dispatch => {};","map":{"version":3,"sources":["/Users/andershornor/Class_Work/ReadThat1/client/src/actions/userActions.jsx"],"names":["NEW_USER","USER_LOGIN","USER_LOGOUT","PAGE_RELOAD","API","pageReload","dispatch","localStorage","getItem","token","fetch","headers","then","res","json","type","payload","currentUser","isLoggedIn","userLogin","state","username","password","e","preventDefault","method","Accept","body","JSON","stringify","user","errors","alert","setState","passwordConfirmation","setItem","userLogout","clear","newUser"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,WAA/B,EAA4CC,WAA5C,QAA+D,kBAA/D;AACA,SAASC,GAAT,QAAoB,wBAApB;AAEI,OAAO,MAAMC,UAAU,GAAG,MAAMC,QAAQ,IAAI;AAAA,gCACtBC,YAAY,CAACC,OAAb,CAAqB,YAArB,CADsB;AAAA,QAChCC,KADgC,yBAChCA,KADgC;;AAExC,MAAIA,KAAK,KAAK,WAAV,IAAyBA,KAAK,KAAK,IAAvC,EAA6C;AACzCC,IAAAA,KAAK,WAAIN,GAAJ,yBAA6B;AAC9BO,MAAAA,OAAO,EAAE;AACT,0CAA2BF,KAA3B,CADS,CAET;AACA;;AAHS;AADqB,KAA7B,CAAL,CAOCG,IAPD,CAOMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAPb,EAQCF,IARD,CAQMC,GAAG,IAAIP,QAAQ,CAAC;AAClBS,MAAAA,IAAI,EAAEZ,WADY;AAElBa,MAAAA,OAAO,EAAE;AACLC,QAAAA,WAAW,EAAEJ,GADR;AAELK,QAAAA,UAAU,EAAE,IAFP;AAGLT,QAAAA,KAAK,EAAEI,GAAG,CAACJ;AAHN;AAFS,KAAD,CARrB;AAgBH;AACJ,CApBM;AAsBP,OAAO,MAAMU,SAAS,GAAG,MAAM,MAAOb,QAAP,IAAoB;AAAA,sBAChB,KAAKc,KADW;AAAA,QACvCC,QADuC,eACvCA,QADuC;AAAA,QAC7BC,QAD6B,eAC7BA,QAD6B;AAErDC,EAAAA,CAAC,CAACC,cAAF;AACA,QAAMd,KAAK,CAACN,GAAG,GAAG,OAAP,EAAgB;AAC1BqB,IAAAA,MAAM,EAAE,MADkB;AAE1Bd,IAAAA,OAAO,EAAE;AAAE,sBAAgB,kBAAlB;AAAsCe,MAAAA,MAAM,EAAE;AAA9C,KAFiB;AAG1BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,MAAAA,IAAI,EAAE;AAAET,QAAAA,QAAQ,EAAEA,QAAZ;AAAsBC,QAAAA,QAAQ,EAAEA;AAAhC;AAAR,KAAf;AAHoB,GAAhB,CAAL,CAKJV,IALI,CAKCC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EALR,EAMJF,IANI,CAMCC,GAAG,IAAI;AACZA,IAAAA,GAAG,CAACkB,MAAJ,GACAC,KAAK,CAACnB,GAAG,CAACkB,MAAL,CADL,GAGA,KAAKE,QAAL,CAAc;AACbhB,MAAAA,WAAW,EAAEJ,GADA;AAEbK,MAAAA,UAAU,EAAE,IAFC;AAGbT,MAAAA,KAAK,EAAEI,GAAG,CAACJ,KAHE;AAIba,MAAAA,QAAQ,EAAE,EAJG;AAKbY,MAAAA,oBAAoB,EAAE;AALT,KAAd,CAHA;AAUA,GAjBI,CAAN;;AAmBC,MAAG,KAAKd,KAAL,CAAWX,KAAX,KAAqB,IAAxB,EAA6B;AAC5BF,IAAAA,YAAY,CAAC4B,OAAb,CAAqB,YAArB,EAAmC,KAAKf,KAAL,CAAWX,KAA9C;AACA;AACC,CAzBM;AA2BP,OAAO,MAAM2B,UAAU,GAAG,MAAM9B,QAAQ,IAAI;AACxCC,EAAAA,YAAY,CAAC8B,KAAb;AACA/B,EAAAA,QAAQ,CAAC;AACLS,IAAAA,IAAI,EAAEb,WADD;AAELc,IAAAA,OAAO,EAAE;AAACE,MAAAA,UAAU,EAAE;AAAb;AAFJ,GAAD,CAAR;AAIH,CANM;AAQP,OAAO,MAAMoB,OAAO,GAAG,MAAMhC,QAAQ,IAAI,CAExC,CAFM","sourcesContent":["import { NEW_USER, USER_LOGIN, USER_LOGOUT, PAGE_RELOAD } from '../actions/types'\nimport { API } from '../containers/MainPage'\n\n    export const pageReload = () => dispatch => {\n        const { token } = localStorage.getItem('user-token')\n        if( token !== \"undefined\" && token !== null) {\n            fetch(`${API}users/current_user`, {\n                headers: {\n                'Authorization': `Bearer ${token}`,\n                // 'Content-Type': 'application/json',\n                // Accept: 'application/json'\n                }\n            })\n            .then(res => res.json())\n            .then(res => dispatch({\n                type: PAGE_RELOAD,\n                payload: {\n                    currentUser: res, \n                    isLoggedIn: true, \n                    token: res.token}\n                })\n            )\n        }\n    }\n\n    export const userLogin = () => async (dispatch) => {\n        const { username, password } = this.state;\n\t\te.preventDefault();\n\t\tawait fetch(API + 'login', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: { 'Content-Type': 'application/json', Accept: 'application/json' },\n\t\t\tbody: JSON.stringify({ user: { username: username, password: password } })\n\t\t})\n\t\t\t.then(res => res.json())\n\t\t\t.then(res => {\n\t\t\t\tres.errors ? \n\t\t\t\talert(res.errors)\n\t\t\t\t:\n\t\t\t\tthis.setState({\n\t\t\t\t\tcurrentUser: res,\n\t\t\t\t\tisLoggedIn: true,\n\t\t\t\t\ttoken: res.token,\n\t\t\t\t\tpassword: '',\n\t\t\t\t\tpasswordConfirmation: ''\n\t\t\t\t})\n\t\t\t}\n\t\t\t)\n\t\t\tif(this.state.token !== null){\n\t\t\t\tlocalStorage.setItem('user-token', this.state.token);\n\t\t\t}\n    }\n\n    export const userLogout = () => dispatch => {\n        localStorage.clear()\n        dispatch({\n            type: USER_LOGOUT,\n            payload: {isLoggedIn: false}\n        })\n    }\n\n    export const newUser = () => dispatch => {\n\n    }"]},"metadata":{},"sourceType":"module"}