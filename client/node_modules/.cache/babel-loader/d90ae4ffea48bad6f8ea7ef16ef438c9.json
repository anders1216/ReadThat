{"ast":null,"code":"import { FETCH_VOTES, NEW_VOTE, VOTE_COUNT } from './types';\nimport { API } from '../containers/MainPage';\nexport const fetchVotes = () => async dispatch => {\n  await fetch(API + 'votes').then(res => res.json()).then(votes => dispatch({\n    type: FETCH_VOTES,\n    payload: votes\n  }));\n};\nexport const createVote = (ID, e, comment) => async (dispatch, getState) => {\n  const token = getState().user.token;\n  const currentUser = getState().user.currentUser;\n  let placeHolder;\n\n  if (comment) {\n    const vote = {\n      post_id: postID,\n      user_id: currentUser.user.id,\n      is_down_vote: bool\n    };\n  }\n\n  let bool = true;\n  if (e === 'up') bool = false;\n  await fetch(API + 'votes', {\n    method: 'POST',\n    headers: {\n      Authorization: \"Bearer \".concat(token),\n      'Content-Type': 'application/json',\n      Accept: 'application/json'\n    },\n    body: JSON.stringify({\n      vote\n    })\n  }).then(res => res.json()).then(vote => {\n    vote.message ? placeHolder = vote.votes : placeHolder = vote;\n  });\n  await dispatch({\n    type: NEW_VOTE,\n    payload: {\n      votes: placeHolder,\n      updateBool: true\n    }\n  });\n};\nexport const voteCount = (comOrPost = \"post\") => async (dispatch, getState) => {\n  const votes = await getState().votes.votes;\n  let placeholder = await getState().votes.voteCount;\n  await votes.forEach(vote => {\n    if (placeholder[comOrPost][vote[\"\".concat(comOrPost, \"_id\")]]) {\n      if (vote.is_down_vote) {\n        placeholder[comOrPost][vote[\"\".concat(comOrPost, \"_id\")]] -= 1;\n      } else {\n        placeholder[comOrPost][vote[\"\".concat(comOrPost, \"_id\")]] += 1;\n      }\n    } else {\n      if (vote.is_down_vote) {\n        placeholder[comOrPost][vote[\"\".concat(comOrPost, \"_id\")]] = -1;\n      } else if (vote[\"\".concat(comOrPost, \"_id\")] > 0) {\n        placeholder[comOrPost][vote[\"\".concat(comOrPost, \"_id\")]] = 1;\n      } else {\n        debugger;\n      }\n    }\n  });\n  await dispatch({\n    type: VOTE_COUNT,\n    payload: placeholder\n  });\n};","map":{"version":3,"sources":["/Users/andershornor/Class_Work/ReadThat1/client/src/actions/voteActions.jsx"],"names":["FETCH_VOTES","NEW_VOTE","VOTE_COUNT","API","fetchVotes","dispatch","fetch","then","res","json","votes","type","payload","createVote","ID","e","comment","getState","token","user","currentUser","placeHolder","vote","post_id","postID","user_id","id","is_down_vote","bool","method","headers","Authorization","Accept","body","JSON","stringify","message","updateBool","voteCount","comOrPost","placeholder","forEach"],"mappings":"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","sourcesContent":["import { FETCH_VOTES, NEW_VOTE, VOTE_COUNT } from './types'\nimport { API } from '../containers/MainPage'\n\n    export const fetchVotes = () => async dispatch => {\n        await fetch(API + 'votes')\n            .then(res => res.json())\n            .then(votes => dispatch({ \n                type: FETCH_VOTES,\n                payload: votes })\n            );\n\t}\n\t\n    export const createVote = (ID, e, comment) => async (dispatch, getState) => {\n\t\tconst token = getState().user.token\n\t\tconst currentUser = getState().user.currentUser\n\t\tlet placeHolder;\n\t\tif(comment){\n\t\t\tconst vote = {\n\t\t\t\tpost_id: postID,\n\t\t\t\tuser_id: currentUser.user.id,\n\t\t\t\tis_down_vote: bool\n\t\t\t}\n\t\t} \n\t\tlet bool = true\n\t\t\tif (e === 'up')\n\t\t\t\tbool = false\n\t\t\tawait fetch(API + 'votes', {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t\t\t\t'Content-Type': 'application/json',\t\n\t\t\t\t\t\tAccept: 'application/json'\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify({ \n\t\t\t\t\t\tvote\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\t\t.then(res => res.json())\n\t\t\t\t\t.then(vote => {\n\t\t\t\t\t\tvote.message ? \n\t\t\t\t\t\tplaceHolder = vote.votes\n\t\t\t\t\t\t: \n\t\t\t\t\t\tplaceHolder = vote;\n\t\t\t\t\t})\n\t\t\t\t\t\n\t\t\tawait dispatch({\n\t\t\t\ttype: NEW_VOTE,\n\t\t\t\tpayload: {\n\t\t\t\t\tvotes: placeHolder,\n\t\t\t\t\tupdateBool:true\n\t\t\t\t}\n\t\t\t})\n\t};\n\n\texport const voteCount = (comOrPost = \"post\") => async (dispatch, getState) => {\n\t\tconst votes = await getState().votes.votes\n\t\tlet placeholder = await getState().votes.voteCount\n\t\t\tawait votes.forEach(vote => {\n\t\t\t\tif(placeholder[comOrPost][vote[`${comOrPost}_id`]]){\n\t\t\t\t\tif(vote.is_down_vote){\n\t\t\t\t\t\tplaceholder[comOrPost][vote[`${comOrPost}_id`]] -= 1\n\t\t\t\t\t}else{\n\t\t\t\t\t\tplaceholder[comOrPost][vote[`${comOrPost}_id`]] += 1\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tif(vote.is_down_vote){\n\t\t\t\t\t\tplaceholder[comOrPost][vote[`${comOrPost}_id`]] = -1\n\t\t\t\t\t}else if(vote[`${comOrPost}_id`] > 0){\n\t\t\t\t\t\tplaceholder[comOrPost][vote[`${comOrPost}_id`]] = 1\n\t\t\t\t\t}else{\n\t\t\t\t\t\tdebugger\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\n\t\tawait dispatch({\n\t\t\ttype: VOTE_COUNT,\n\t\t\tpayload: placeholder\n\t\t})\n\t}"]},"metadata":{},"sourceType":"module"}