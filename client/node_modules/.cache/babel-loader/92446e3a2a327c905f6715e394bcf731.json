{"ast":null,"code":"var _jsxFileName = \"/Users/andershornor/Class_Work/ReadThat1/client/src/components/Comment.jsx\";\nimport React, { Component } from 'react';\nimport NewComment from './forms/NewComment';\nimport { API } from '../containers/MainPage';\nimport { connect } from 'react-redux';\nimport { createVote, voteCount } from '../actions/voteActions';\n\nclass Comment extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      newComment: '',\n      commentsComments: [],\n      commenting: false,\n      displayComments: false\n    };\n\n    this.commentOnPost = () => {\n      const commenting = this.state.commenting;\n      this.setState({\n        commenting: !commenting\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        newComment: e.target.value\n      });\n    };\n\n    this.handleSubmit = (e, key, value) => {\n      e.preventDefault();\n      this.state.newComment.length > 0 ? this.postComment(key, value) : window.alert('No Empty Comments');\n    };\n\n    this.postComment = (key, value) => {\n      const _this$state = this.state,\n            commentsComments = _this$state.commentsComments,\n            newComment = _this$state.newComment,\n            commenting = _this$state.commenting,\n            displayComments = _this$state.displayComments;\n      const currentUser = this.props.currentUser;\n      fetch(API + 'comments', {\n        method: 'POST',\n        headers: {\n          Authorization: \"Bearer \".concat(localStorage.getItem('user-token')),\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          comment: {\n            content: newComment,\n            user_id: currentUser.user.id,\n            [key]: value\n          }\n        })\n      }).then(res => res.json()).then(comment => {\n        comment.errors ? alert(comment.errors) : this.setState({\n          commentsComments: [...commentsComments, comment]\n        });\n      }).then(this.setState({\n        commenting: !commenting\n      })).then(this.setState({\n        displayComments: !displayComments\n      }));\n    };\n\n    this.displayComments = async () => {\n      const _this$props = this.props,\n            post = _this$props.post,\n            comment = _this$props.comment;\n      await fetch(\"\".concat(API, \"comments/\").concat(post.id, \"/\").concat(comment.id), {\n        headers: {\n          Authorization: \"Bearer \".concat(localStorage.getItem('user-token'))\n        }\n      }).then(res => res.json()).then(comments => this.setState({\n        commentsComments: comments\n      }));\n      this.setState({\n        displayComments: !this.state.displayComments\n      });\n    };\n\n    this.rapidVoteIncrement = async e => {\n      const _this$props2 = this.props,\n            createVote = _this$props2.createVote,\n            voteCount = _this$props2.voteCount,\n            comment = _this$props2.comment;\n      await createVote(comment.id, e.target.name);\n      await voteCount(\"comment\");\n    };\n  }\n\n  componentDidMount() {\n    const _this$props3 = this.props,\n          comments = _this$props3.comments,\n          comment = _this$props3.comment;\n    comments.forEach(comment1 => {\n      if (comment1.comment_id && comment1.comment_id === comment.id) {\n        this.state.commentsComments.push(comment1);\n      }\n    });\n  }\n\n  render() {\n    const _this$props4 = this.props,\n          comment = _this$props4.comment,\n          comments = _this$props4.comments,\n          currentUser = _this$props4.currentUser,\n          post = _this$props4.post,\n          countedVotes = _this$props4.countedVotes;\n    const _this$state2 = this.state,\n          displayComments = _this$state2.displayComments,\n          commentsComments = _this$state2.commentsComments;\n    return React.createElement(\"div\", {\n      className: \"comment-card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, comment.content), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Doots: \", countedVotes.comment[comment.id] ? countedVotes.comment[comment.id] : 0), React.createElement(\"button\", {\n      name: \"up\",\n      onClick: e => this.rapidVoteIncrement(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"\\u25B2\"), React.createElement(\"button\", {\n      name: \"down\",\n      onClick: e => this.rapidVoteIncrement(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"\\u25BC\"), React.createElement(\"button\", {\n      onClick: e => this.commentOnPost(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Reply\"), this.state.commenting ? React.createElement(NewComment, {\n      variableKey: 'comment_id',\n      value: comment.id,\n      handleChange: this.handleChange,\n      handleSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }) : null, React.createElement(\"button\", {\n      onClick: e => this.displayComments(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Display Comments\"), React.createElement(\"ul\", {\n      className: \"comment-ul\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, displayComments && commentsComments.length > 0 ? commentsComments.map(comment => {\n      return React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(Comment, {\n        comment: comment,\n        comments: comments,\n        displayComments: this.displayComments,\n        commentOnPost: this.commentOnPost,\n        post: post,\n        currentUser: currentUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }));\n    }) : null));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  currentUser: state.user.currentUser,\n  votes: state.votes.votes,\n  countedVotes: state.votes.voteCount\n});\n\nexport default connect(mapStateToProps, {\n  createVote,\n  voteCount\n})(Comment);","map":{"version":3,"sources":["/Users/andershornor/Class_Work/ReadThat1/client/src/components/Comment.jsx"],"names":["React","Component","NewComment","API","connect","createVote","voteCount","Comment","state","newComment","commentsComments","commenting","displayComments","commentOnPost","setState","handleChange","e","target","value","handleSubmit","key","preventDefault","length","postComment","window","alert","currentUser","props","fetch","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","comment","content","user_id","user","id","then","res","json","errors","post","comments","rapidVoteIncrement","name","componentDidMount","forEach","comment1","comment_id","push","render","countedVotes","map","mapStateToProps","votes"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport NewComment from './forms/NewComment';\nimport { API } from '../containers/MainPage'\nimport { connect } from 'react-redux'\nimport { createVote, voteCount } from '../actions/voteActions'\n\nclass Comment extends Component {\n\tstate = {\n\t\tnewComment: '',\n\t\tcommentsComments: [],\n\t\tcommenting: false,\n\t\tdisplayComments: false\n\t}\n\n\n\tcomponentDidMount(){\n\tconst { comments, comment } = this.props\n\tcomments.forEach(comment1 => {\n\t\tif (comment1.comment_id && comment1.comment_id === comment.id) {\n\t\t\t\tthis.state.commentsComments.push(comment1);\n\t\t}\n\t});\n\t}\n\n\tcommentOnPost = () => {\n\t\tconst { commenting } = this.state;\n\t\tthis.setState({ commenting: !commenting });\n\t};\n\n\thandleChange = e => {\n\t\tthis.setState({ newComment: e.target.value });\n\t};\n\n\thandleSubmit = (e, key, value) => {\n\t\te.preventDefault();\n\t\tthis.state.newComment.length > 0\n\t\t\t? this.postComment(key, value)\n\t\t\t: window.alert('No Empty Comments');\n\t};\n\n\tpostComment = (key, value) => {\n\t\tconst { commentsComments, newComment, commenting, displayComments } = this.state;\n\t\tconst { currentUser } = this.props;\n\t\tfetch(API + 'comments', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${localStorage.getItem('user-token')}`,\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'Accept': 'application/json'\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tcomment: { content: newComment, user_id: currentUser.user.id, [key]: value }\n\t\t\t})\n\t\t})\n\t\t\t.then(res => res.json())\n\t\t\t.then(comment => {\n\t\t\t\tcomment.errors\n\t\t\t\t\t? alert(comment.errors)\n\t\t\t\t\t: this.setState({ commentsComments: [...commentsComments, comment] });\n\t\t\t})\n\t\t\t.then(this.setState({ commenting: !commenting }))\n\t\t\t.then(this.setState({displayComments: !displayComments}));\n\t};\n\n\tdisplayComments = async () => {\n\t\tconst { post, comment } = this.props;\n\n\t\tawait fetch(`${API}comments/${post.id}/${comment.id}`,{\n\t\t\theaders: {Authorization: `Bearer ${localStorage.getItem('user-token')}`}})\n\t\t\t.then(res => res.json())\n\t\t\t.then(comments => this.setState({ commentsComments: comments }));\n\t\tthis.setState({ displayComments: !this.state.displayComments });\n\t};\n\n\trapidVoteIncrement = async (e) => {\n\t\tconst { createVote, voteCount, comment } = this.props;\n\t\tawait createVote(comment.id, e.target.name, )\n\t\tawait voteCount(\"comment\")\n\t};\n\n\trender(){\n\t\tconst { comment, comments, currentUser, post, countedVotes } = this.props\n\t\tconst { displayComments, commentsComments } = this.state\n\t\treturn (\n\t\t<div className='comment-card'>\n\t\t\t<p>{comment.content}</p>\n\t\t\t<span>Doots: {countedVotes.comment[comment.id] ? countedVotes.comment[comment.id] : 0}</span>\n\t\t\t\t\t<button name='up' onClick={e => this.rapidVoteIncrement(e)}>\n\t\t\t\t\t\t▲\n\t\t\t\t\t</button>\n\t\t\t\t\t<button name='down' onClick={e => this.rapidVoteIncrement(e)}>\n\t\t\t\t\t\t▼\n\t\t\t\t</button>\n\t\t\t<button onClick={e => this.commentOnPost(e)}>Reply</button>\n\t\t\t{this.state.commenting ? (\n\t\t\t\t<NewComment\n\t\t\t\t\tvariableKey={'comment_id'}\n\t\t\t\t\tvalue={comment.id}\n\t\t\t\t\thandleChange={this.handleChange}\n\t\t\t\t\thandleSubmit={this.handleSubmit}\n\t\t\t\t/>\n\t\t\t) : null}\n\t\t\t<button onClick={e => this.displayComments(e)}>Display Comments</button>\n\t\t\t<ul className='comment-ul'>\n\t\t\t\t{displayComments && commentsComments.length > 0\n\t\t\t\t\t? commentsComments.map(comment => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Comment\n\t\t\t\t\t\t\t\t\t\tcomment={comment}\n\t\t\t\t\t\t\t\t\t\tcomments={comments}\n\t\t\t\t\t\t\t\t\t\tdisplayComments={this.displayComments}\n\t\t\t\t\t\t\t\t\t\tcommentOnPost={this.commentOnPost}\n\t\t\t\t\t\t\t\t\t\tpost={post}\n\t\t\t\t\t\t\t\t\t\tcurrentUser={currentUser}/>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t  })\n\t\t\t\t\t: null}\n\t\t\t</ul>\n\t\t</div>\n\t);\n\t};\n}\n\nconst mapStateToProps = state => ({\n\tcurrentUser: state.user.currentUser,\n\tvotes: state.votes.votes,\n\tcountedVotes: state.votes.voteCount\n})\n\nexport default connect(mapStateToProps, { createVote, voteCount })(Comment);\n"]},"metadata":{},"sourceType":"module"}