{"ast":null,"code":"import { FETCH_VOTES, NEW_VOTE, VOTE_COUNT } from './types';\nimport { API } from '../containers/MainPage';\nexport const fetchVotes = () => dispatch => {\n  fetch(API + 'votes').then(res => res.json()).then(votes => dispatch({\n    type: FETCH_VOTES,\n    payload: votes\n  }));\n};\nexport const createVote = (postID, e) => async (dispatch, getState) => {\n  const token = getState().user.token;\n  const currentUser = getState().user.currentUser;\n  let placeHolder;\n  e === 'up' ? await fetch(API + 'votes', {\n    method: 'POST',\n    headers: {\n      Authorization: \"Bearer \".concat(token),\n      'Content-Type': 'application/json',\n      Accept: 'application/json'\n    },\n    body: JSON.stringify({\n      vote: {\n        post_id: postID,\n        user_id: currentUser.user.id,\n        is_down_vote: false\n      }\n    })\n  }).then(res => res.json()).then(vote => {\n    vote.message ? placeHolder = vote.votes : placeHolder = vote;\n  }) : await fetch(API + 'votes/delete', {\n    method: 'POST',\n    headers: {\n      Authorization: \"Bearer \".concat(token),\n      'Content-Type': 'application/json',\n      Accept: 'application/json'\n    },\n    body: JSON.stringify({\n      vote: {\n        post_id: postID,\n        user_id: currentUser.user.id,\n        is_down_vote: true\n      }\n    })\n  }).then(res => res.json()).then(vote => {\n    vote.message ? placeHolder = vote.votes : placeHolder = vote;\n  });\n  await dispatch({\n    type: NEW_VOTE,\n    payload: {\n      votes: placeHolder,\n      updateBool: true\n    }\n  });\n};\nexport const voteCount = comOrPost => async (dispatch, getState) => {\n  const votes = getState().votes.votes;\n  let placeholder = {};\n  votes.forEach(vote => {\n    if (placeholder[vote[comOrPost]]) {\n      if (vote.is_down_vote) {\n        placeholder[vote[comOrPost]] -= 1;\n      } else {\n        placeholder[vote[comOrPost]] += 1;\n      }\n    } else {\n      if (vote.is_down_vote) {\n        placeholder[vote[comOrPost]] = -1;\n      } else {\n        placeholder[vote[comOrPost]] = 1;\n      }\n    }\n  });\n  await dispatch({\n    type: VOTE_COUNT,\n    payload: placeholder\n  });\n};","map":{"version":3,"sources":["/Users/andershornor/Class_Work/ReadThat1/client/src/actions/voteActions.jsx"],"names":["FETCH_VOTES","NEW_VOTE","VOTE_COUNT","API","fetchVotes","dispatch","fetch","then","res","json","votes","type","payload","createVote","postID","e","getState","token","user","currentUser","placeHolder","method","headers","Authorization","Accept","body","JSON","stringify","vote","post_id","user_id","id","is_down_vote","message","updateBool","voteCount","comOrPost","placeholder","forEach"],"mappings":"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","sourcesContent":["import { FETCH_VOTES, NEW_VOTE, VOTE_COUNT } from './types'\nimport { API } from '../containers/MainPage'\n\n    export const fetchVotes = () => dispatch => {\n        fetch(API + 'votes')\n            .then(res => res.json())\n            .then(votes => dispatch({ \n                type: FETCH_VOTES,\n                payload: votes })\n            );\n\t}\n\t\n    export const createVote = (postID, e) => async (dispatch, getState) => {\n\t\tconst token = getState().user.token\n\t\tconst currentUser = getState().user.currentUser\n\t\tlet placeHolder;\n\t\te === 'up'\n\t\t\t? \n\t\t\tawait fetch(API + 'votes', {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t\t\t\t'Content-Type': 'application/json',\t\n\t\t\t\t\t\tAccept: 'application/json'\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify({ \n\t\t\t\t\t\tvote: {\n\t\t\t\t\t\t\tpost_id: postID,\n\t\t\t\t\t\t\tuser_id: currentUser.user.id,\n\t\t\t\t\t\t\tis_down_vote: false \n\t\t\t\t\t\t} \n\t\t\t\t\t})\n\t\t\t  })\n\t\t\t\t\t.then(res => res.json())\n\t\t\t\t\t.then(vote => {\n\t\t\t\t\t\tvote.message ? \n\t\t\t\t\t\tplaceHolder = vote.votes\n\t\t\t\t\t\t: \n\t\t\t\t\t\tplaceHolder = vote;\n\t\t\t\t\t})\n\t\t\t: \n\t\t\tawait fetch(API + 'votes/delete', {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\tAccept: 'application/json'\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify({ \n\t\t\t\t\t\tvote: { \n\t\t\t\t\t\t\tpost_id: postID,\n\t\t\t\t\t\t\tuser_id: currentUser.user.id,\n\t\t\t\t\t\t\tis_down_vote: true \n\t\t\t\t\t\t} \n\t\t\t\t\t})\n\t\t\t  })\n\t\t\t\t\t.then(res => res.json())\n\t\t\t\t\t.then( vote =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\tvote.message ? \n\t\t\t\t\t\tplaceHolder = vote.votes\n\t\t\t\t\t\t:\n\t\t\t\t\t\tplaceHolder = vote\n\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\tawait dispatch({\n\t\t\t\t\ttype: NEW_VOTE,\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tvotes: placeHolder,\n\t\t\t\t\t\tupdateBool:true\n\t\t\t\t\t}\n\t\t\t\t})\n\t};\n\n\texport const voteCount = (comOrPost) => async (dispatch, getState) => {\n\t\tconst votes = getState().votes.votes\n\t\tlet placeholder = {}\n\t\t\tvotes.forEach(vote => {\n\t\t\t\tif(placeholder[vote[comOrPost]]){\n\t\t\t\t\tif(vote.is_down_vote){\n\t\t\t\t\t\tplaceholder[vote[comOrPost]] -= 1\n\t\t\t\t\t}else{\n\t\t\t\t\t\tplaceholder[vote[comOrPost]] += 1\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tif(vote.is_down_vote){\n\t\t\t\t\t\tplaceholder[vote[comOrPost]] = -1\n\t\t\t\t\t}else{\n\t\t\t\t\t\tplaceholder[vote[comOrPost]] = 1\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\tawait dispatch({\n\t\t\ttype: VOTE_COUNT,\n\t\t\tpayload: placeholder\n\t\t})\n\t}"]},"metadata":{},"sourceType":"module"}