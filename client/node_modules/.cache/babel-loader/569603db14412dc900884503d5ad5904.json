{"ast":null,"code":"import { FETCH_POSTS, NEW_POST, SELECT_POSTS, CLEAR_POST_SELECTION, FILTER_POSTS } from './types';\nimport { API } from '../containers/MainPage';\nexport const fetchPosts = () => async (dispatch, getState) => {\n  const selectedCategories = getState().categories.selectedCategories;\n  const token = localStorage.getItem('user-token');\n  await dispatch({\n    type: CLEAR_POST_SELECTION\n  });\n\n  if (selectedCategories.length < 1) {\n    fetch(\"\".concat(API, \"posts\"), {\n      headers: {\n        Authorization: \"Bearer \".concat(token)\n      }\n    }).then(res => res.json()).then(posts => dispatch({\n      type: FETCH_POSTS,\n      payload: posts\n    }));\n  } else {\n    selectedCategories.forEach(category => {\n      fetch(\"\".concat(API, \"categories/\").concat(category.value), {\n        headers: {\n          Authorization: \"Bearer \".concat(token)\n        }\n      }).then(res => res.json()).then(posts => dispatch({\n        type: SELECT_POSTS,\n        payload: posts\n      }));\n    });\n  }\n};\nexport const filterPosts = () => async (dispatch, getState) => {\n  const voteCount = getState().votes.voteCount;\n  const posts = getState().posts.posts;\n  let placeholder = [];\n  let keys = Object.keys(voteCount);\n  keys.sort((a, b) => {\n    return voteCount[a] - voteCount[b];\n  });\n  let filteredPosts = keys.map(key => {\n    return {\n      [key]: voteCount[key]\n    };\n  });\n  let counter = 0;\n  await filteredPosts.forEach(post => {\n    while (Object.values(post) >= 0 && counter < filteredPosts.length) {\n      counter++;\n      debugger;\n      placeholder.push(posts.find(pos => {\n        return pos.id === Object.keys(post).parseInt();\n      }));\n    }\n  });\n  console.log(\"placeholder:\", placeholder);\n  dispatch({\n    type: FILTER_POSTS,\n    payload: filteredPosts\n  });\n};\nexport const createPost = post => async dispatch => {\n  const token = localStorage.getItem('user-token');\n  await fetch(\"\".concat(API, \"posts\"), {\n    method: 'POST',\n    headers: {\n      Authorization: \"Bearer \".concat(token),\n      'Content-type': 'Application/JSON'\n    },\n    body: JSON.stringify({\n      post: post\n    })\n  }).then(res => res.json()).then(post => post.errors ? window.alert(post.errors) : dispatch({\n    type: NEW_POST,\n    payload: post\n  }));\n};","map":{"version":3,"sources":["/Users/andershornor/Class_Work/ReadThat1/client/src/actions/postActions.jsx"],"names":["FETCH_POSTS","NEW_POST","SELECT_POSTS","CLEAR_POST_SELECTION","FILTER_POSTS","API","fetchPosts","dispatch","getState","selectedCategories","categories","token","localStorage","getItem","type","length","fetch","headers","Authorization","then","res","json","posts","payload","forEach","category","value","filterPosts","voteCount","votes","placeholder","keys","Object","sort","a","b","filteredPosts","map","key","counter","post","values","push","find","pos","id","parseInt","console","log","createPost","method","body","JSON","stringify","errors","window","alert"],"mappings":"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","sourcesContent":["import { FETCH_POSTS, NEW_POST, SELECT_POSTS, CLEAR_POST_SELECTION, FILTER_POSTS } from './types'\nimport { API } from '../containers/MainPage'\n\nexport const fetchPosts = () => async (dispatch, getState) => {\n        const { selectedCategories } = getState().categories\n        const token = localStorage.getItem('user-token');\n        await dispatch({\n            type: CLEAR_POST_SELECTION,\n        })\n\t\tif (selectedCategories.length < 1) {\n\t\t\tfetch(`${API}posts`, {\n\t\t\t\theaders: { Authorization: `Bearer ${token}` }\n\t\t\t})\n\t\t\t\t.then(res => res.json())\n\t\t\t\t.then(posts => dispatch({\n                    type: FETCH_POSTS,\n                    payload: posts\n                }));\n\t\t} else {\n            selectedCategories.forEach(category => {\n\t\t\t\tfetch(`${API}categories/${category.value}`, {\n\t\t\t\t\theaders: { Authorization: `Bearer ${token}` }\n\t\t\t\t})\n                    .then(res => res.json())\n                    .then(posts => dispatch({\n                        type: SELECT_POSTS,\n                        payload: posts}))   \n            })\n \n\t\t}\n    };\n\nexport const filterPosts = () => async (dispatch, getState) => {\n   \n    const { voteCount } = getState().votes\n    const { posts } = getState().posts\n    let placeholder = []\n    let keys = Object.keys(voteCount)\n    keys.sort((a, b) => {return voteCount[a] - voteCount[b]})\n    let filteredPosts = keys.map(key => {\n        return {[key]: voteCount[key]}\n    })\n    \n    let counter = 0\n    await filteredPosts.forEach(post => {\n       while(Object.values(post) >= 0 && counter < filteredPosts.length){\n        counter ++\n        debugger\n        placeholder.push(posts.find( pos => {return pos.id === Object.keys(post).parseInt()}))\n       }\n    })\n    console.log(\"placeholder:\", placeholder)\n\n    dispatch({\n        type: FILTER_POSTS,\n        payload: filteredPosts\n    })\n\n}\n\nexport const createPost = (post) => async (dispatch) => {\n    const token = localStorage.getItem('user-token')\n    await fetch(`${API}posts`, {\n        method: 'POST',\n        headers: { \n            Authorization: `Bearer ${token}`,\n            'Content-type': 'Application/JSON',\n        },\n        body: JSON.stringify({post: post})\n    })\n    .then(res => res.json())\n    .then(post => post.errors ? window.alert(post.errors) : dispatch({\n        type: NEW_POST,\n        payload: post\n    }))\n}\n\n"]},"metadata":{},"sourceType":"module"}