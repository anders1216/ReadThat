{"ast":null,"code":"import { FETCH_POSTS, NEW_POST, SELECT_POSTS, CLEAR_POST_SELECTION } from './types';\nimport { API } from '../containers/MainPage';\nexport const fetchPosts = () => async (dispatch, getState) => {\n  const selectedCategories = getState().categories.selectedCategories;\n  const token = localStorage.getItem('user-token');\n\n  if (selectedCategories.length < 1) {\n    fetch(API + 'posts', {\n      headers: {\n        Authorization: \"Bearer \".concat(token)\n      }\n    }).then(res => res.json()).then(posts => dispatch({\n      type: FETCH_POSTS,\n      payload: posts\n    }));\n  } else {\n    await dispatch({\n      type: CLEAR_POST_SELECTION,\n      payload: []\n    });\n    await selectedCategories.forEach(category => {\n      fetch(API + 'categories/' + \"\".concat(category.value), {\n        headers: {\n          Authorization: \"Bearer \".concat(token)\n        }\n      }).then(res => res.json()).then(posts => dispatch({\n        type: SELECT_POSTS,\n        payload: posts\n      }));\n    });\n  }\n};\nexport const createPost = post => dispatch => {\n  const token = localStorage.getItem('user-token');\n  fetch(API + 'posts', {\n    method: 'POST',\n    headers: {\n      Authorization: \"Bearer \".concat(token),\n      'Content-type': 'Application/JSON'\n    },\n    body: JSON.stringify(post)\n  }).then(res => res.json()).then(post => dispatch({\n    type: NEW_POST,\n    payload: post\n  }));\n};","map":{"version":3,"sources":["/Users/andershornor/Class_Work/ReadThat1/client/src/actions/postActions.jsx"],"names":["FETCH_POSTS","NEW_POST","SELECT_POSTS","CLEAR_POST_SELECTION","API","fetchPosts","dispatch","getState","selectedCategories","categories","token","localStorage","getItem","length","fetch","headers","Authorization","then","res","json","posts","type","payload","forEach","category","value","createPost","post","method","body","JSON","stringify"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,EAAgCC,YAAhC,EAA8CC,oBAA9C,QAA0E,SAA1E;AACA,SAASC,GAAT,QAAoB,wBAApB;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAAA,QACpDC,kBADoD,GAC7BD,QAAQ,GAAGE,UADkB,CACpDD,kBADoD;AAEtD,QAAME,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAd;;AACN,MAAIJ,kBAAkB,CAACK,MAAnB,GAA4B,CAAhC,EAAmC;AAClCC,IAAAA,KAAK,CAACV,GAAG,GAAG,OAAP,EAAgB;AACpBW,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,mBAAYN,KAAZ;AAAf;AADW,KAAhB,CAAL,CAGEO,IAHF,CAGOC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAHd,EAIEF,IAJF,CAIOG,KAAK,IAAId,QAAQ,CAAC;AACRe,MAAAA,IAAI,EAAErB,WADE;AAERsB,MAAAA,OAAO,EAAEF;AAFD,KAAD,CAJxB;AAQA,GATD,MASO;AACG,UAAMd,QAAQ,CAAC;AACXe,MAAAA,IAAI,EAAElB,oBADK;AAEXmB,MAAAA,OAAO,EAAE;AAFE,KAAD,CAAd;AAIA,UAAMd,kBAAkB,CAACe,OAAnB,CAA2BC,QAAQ,IAAI;AACrDV,MAAAA,KAAK,CAACV,GAAG,GAAG,aAAN,aAAyBoB,QAAQ,CAACC,KAAlC,CAAD,EAA4C;AAChDV,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,mBAAYN,KAAZ;AAAf;AADuC,OAA5C,CAAL,CAGiBO,IAHjB,CAGsBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAH7B,EAIiBF,IAJjB,CAIsBG,KAAK,IAAId,QAAQ,CAAC;AACpBe,QAAAA,IAAI,EAAEnB,YADc;AAEpBoB,QAAAA,OAAO,EAAEF;AAFW,OAAD,CAJvC;AAOS,KARK,CAAN;AAST;AACE,CA3BE;AA4BP,OAAO,MAAMM,UAAU,GAAIC,IAAD,IAAUrB,QAAQ,IAAI;AAC5C,QAAMI,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAd;AACAE,EAAAA,KAAK,CAACV,GAAG,GAAG,OAAP,EAAgB;AACjBwB,IAAAA,MAAM,EAAE,MADS;AAEjBb,IAAAA,OAAO,EAAE;AACLC,MAAAA,aAAa,mBAAYN,KAAZ,CADR;AAEL,sBAAgB;AAFX,KAFQ;AAMjBmB,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,IAAf;AANW,GAAhB,CAAL,CAQCV,IARD,CAQMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EARb,EASCF,IATD,CASMU,IAAI,IAAIrB,QAAQ,CAAC;AACnBe,IAAAA,IAAI,EAAEpB,QADa;AAEnBqB,IAAAA,OAAO,EAAEK;AAFU,GAAD,CATtB;AAaH,CAfM","sourcesContent":["import { FETCH_POSTS, NEW_POST, SELECT_POSTS, CLEAR_POST_SELECTION } from './types'\nimport { API } from '../containers/MainPage'\n\nexport const fetchPosts = () => async (dispatch, getState) => {\n\t\tconst { selectedCategories } = getState().categories;\n        const token = localStorage.getItem('user-token');\n\t\tif (selectedCategories.length < 1) {\n\t\t\tfetch(API + 'posts', {\n\t\t\t\theaders: { Authorization: `Bearer ${token}` }\n\t\t\t})\n\t\t\t\t.then(res => res.json())\n\t\t\t\t.then(posts => dispatch({\n                    type: FETCH_POSTS,\n                    payload: posts\n                }));\n\t\t} else {\n            await dispatch({\n                type: CLEAR_POST_SELECTION,\n                payload: []\n            })\n            await selectedCategories.forEach(category => {\n\t\t\t\tfetch(API + 'categories/' + `${category.value}`, {\n\t\t\t\t\theaders: { Authorization: `Bearer ${token}` }\n\t\t\t\t})\n                    .then(res => res.json())\n                    .then(posts => dispatch({\n                        type: SELECT_POSTS,\n                        payload: posts}) )   \n            })\n\t\t}\n    };\nexport const createPost = (post) => dispatch => {\n    const token = localStorage.getItem('user-token')\n    fetch(API + 'posts', {\n        method: 'POST',\n        headers: { \n            Authorization: `Bearer ${token}`,\n            'Content-type': 'Application/JSON',\n        },\n        body: JSON.stringify(post)\n    })\n    .then(res => res.json())\n    .then(post => dispatch({\n        type: NEW_POST,\n        payload: post\n    }))\n} "]},"metadata":{},"sourceType":"module"}