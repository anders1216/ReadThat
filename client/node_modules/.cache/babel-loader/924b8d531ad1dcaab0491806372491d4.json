{"ast":null,"code":"import { NEW_USER, USER_LOGIN, USER_LOGOUT, PAGE_RELOAD } from '../actions/types';\nimport { API } from '../containers/MainPage';\nexport const pageReload = () => (dispatch, getState) => {\n  if (getState().user.token !== undefined && getState().user.token !== null) {\n    let token = getState().user.token;\n    fetch(\"\".concat(API, \"users/current_user\"), {\n      headers: {\n        'Authorization': \"Bearer \".concat(token),\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    }).then(res => res.json()).then(res => dispatch({\n      type: PAGE_RELOAD,\n      payload: {\n        currentUser: res,\n        token: res.token\n      }\n    }));\n  }\n};\nexport const userLogin = (username, password) => async dispatch => {\n  await fetch(API + 'login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json'\n    },\n    body: JSON.stringify({\n      user: {\n        username: username,\n        password: password\n      }\n    })\n  }).then(res => res.json()).then(res => {\n    res.errors ? alert(res.errors) : dispatch({\n      type: USER_LOGIN,\n      payload: {\n        currentUser: res,\n        token: res.token\n      }\n    });\n  });\n};\nexport const userLogout = () => async dispatch => {\n  await localStorage.clear();\n  await dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const newUser = (username, password, passwordConfirmation) => dispatch => {\n  fetch(API + 'users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json'\n    },\n    body: JSON.stringify({\n      user: {\n        username: username,\n        password: password,\n        password_confirmation: passwordConfirmation\n      }\n    })\n  }).then(res => res.json()).then(res => {\n    res.error ? alert(res.error) : dispatch({\n      type: NEW_USER,\n      payload: {\n        currentUser: res,\n        token: res.token\n      }\n    });\n  });\n};","map":{"version":3,"sources":["/Users/andershornor/Class_Work/ReadThat1/client/src/actions/userActions.jsx"],"names":["NEW_USER","USER_LOGIN","USER_LOGOUT","PAGE_RELOAD","API","pageReload","dispatch","getState","user","token","undefined","fetch","headers","Accept","then","res","json","type","payload","currentUser","userLogin","username","password","method","body","JSON","stringify","errors","alert","userLogout","localStorage","clear","newUser","passwordConfirmation","password_confirmation","error"],"mappings":"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","sourcesContent":["import { NEW_USER, USER_LOGIN, USER_LOGOUT, PAGE_RELOAD } from '../actions/types'\nimport { API } from '../containers/MainPage'\n\n    export const pageReload = () => (dispatch, getState) => {\n        if( getState().user.token !== undefined && getState().user.token !== null) {\n            let token = getState().user.token\n            fetch(`${API}users/current_user`, {\n                headers: {\n                'Authorization': `Bearer ${token}`,\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n                }\n            })\n            .then(res => res.json())\n            .then(res => dispatch({\n                type: PAGE_RELOAD,\n                payload: {\n                    currentUser: res, \n                    token: res.token}\n                })\n            )\n        }\n    }\n\n    export const userLogin = ( username, password ) => async dispatch => {\n\t\tawait fetch(API + 'login', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: { 'Content-Type': 'application/json', Accept: 'application/json' },\n\t\t\tbody: JSON.stringify({ user: { username: username, password: password } })\n\t\t})\n\t\t\t.then(res => res.json())\n\t\t\t.then(res => {\n\t\t\t\tres.errors ? \n\t\t\t\talert(res.errors)\n\t\t\t\t:\n\t\t\t\tdispatch({\n                    type: USER_LOGIN,\n                    payload: { \n                        currentUser: res,\n                        token: res.token\n                    }\n\t\t\t\t})\n\t\t\t}\n\t\t)\n    }\n\n    export const userLogout = () =>  async dispatch => {\n        await localStorage.clear()\n        await dispatch({\n            type: USER_LOGOUT\n        })\n    }\n\n    export const newUser = ( username, password, passwordConfirmation) => dispatch => {\n\t\tfetch(API + 'users', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: { 'Content-Type': 'application/json', Accept: 'application/json' },\n\t\t\tbody: JSON.stringify({\n\t\t\t\tuser: {\n\t\t\t\t\tusername: username,\n\t\t\t\t\tpassword: password,\n\t\t\t\t\tpassword_confirmation: passwordConfirmation\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t\t\t.then(res => res.json())\n\t\t\t.then(res => {\n\t\t\t\tres.error\n\t\t\t\t\t? alert(res.error)\n\t\t\t\t\t: dispatch({\n                        type: NEW_USER,\n                        payload: {\n\t\t\t\t\t\t\tcurrentUser: res,\n\t\t\t\t\t\t\ttoken: res.token\n                        }\n\t\t\t\t\t  });\n\t\t\t})\n    }"]},"metadata":{},"sourceType":"module"}