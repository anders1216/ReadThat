{"ast":null,"code":"import { FETCH_POSTS, NEW_POST } from './types';\nimport { API } from '../containers/MainPage';\nexport const fetchPosts = () => (dispatch, getState) => {\n  debugger;\n  const selectedCategories = getState().categories.selectedCategories.selectedCategories;\n  const token = localStorage.getItem('user-token');\n\n  if (!selectedCategories) {\n    fetch(API + 'posts', {\n      headers: {\n        Authorization: \"Bearer \".concat(token)\n      }\n    }).then(res => res.json()).then(posts => dispatch({\n      type: FETCH_POSTS,\n      payload: posts\n    }));\n  } else {\n    let selectedPosts = [];\n    selectedCategories.forEach(category => {\n      fetch(API + 'categories/' + \"\".concat(category.value), {\n        headers: {\n          Authorization: \"Bearer \".concat(token)\n        }\n      }).then(res => res.json()).then(posts => [...selectedPosts, posts].flat()).then(dispatch({\n        type: FETCH_POSTS,\n        payload: selectedPosts\n      }));\n    });\n  }\n};\nexport const createPost = post => dispatch => {\n  const token = localStorage.getItem('user-token');\n  fetch(API + 'posts', {\n    method: 'POST',\n    headers: {\n      Authorization: \"Bearer \".concat(token),\n      'Content-type': 'Application/JSON'\n    },\n    body: JSON.stringify(post)\n  }).then(res => res.json()).then(post => dispatch({\n    type: NEW_POST,\n    payload: post\n  }));\n};","map":{"version":3,"sources":["/Users/andershornor/Class_Work/ReadThat1/client/src/actions/postActions.jsx"],"names":["FETCH_POSTS","NEW_POST","API","fetchPosts","dispatch","getState","selectedCategories","categories","token","localStorage","getItem","fetch","headers","Authorization","then","res","json","posts","type","payload","selectedPosts","forEach","category","value","flat","createPost","post","method","body","JSON","stringify"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAuC,SAAvC;AACA,SAASC,GAAT,QAAoB,wBAApB;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAChD;AADgD,QAE9CC,kBAF8C,GAEvBD,QAAQ,GAAGE,UAAX,CAAsBD,kBAFC,CAE9CA,kBAF8C;AAGtD,QAAME,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAd;;AACA,MAAI,CAACJ,kBAAL,EAAyB;AACxBK,IAAAA,KAAK,CAACT,GAAG,GAAG,OAAP,EAAgB;AACpBU,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,mBAAYL,KAAZ;AAAf;AADW,KAAhB,CAAL,CAGEM,IAHF,CAGOC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAHd,EAIEF,IAJF,CAIOG,KAAK,IAAIb,QAAQ,CAAC;AACRc,MAAAA,IAAI,EAAElB,WADE;AAERmB,MAAAA,OAAO,EAAEF;AAFD,KAAD,CAJxB;AAQA,GATD,MASO;AACG,QAAIG,aAAa,GAAG,EAApB;AACTd,IAAAA,kBAAkB,CAACe,OAAnB,CAA2BC,QAAQ,IAAI;AACtCX,MAAAA,KAAK,CAACT,GAAG,GAAG,aAAN,aAAyBoB,QAAQ,CAACC,KAAlC,CAAD,EAA4C;AAChDX,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,mBAAYL,KAAZ;AAAf;AADuC,OAA5C,CAAL,CAGEM,IAHF,CAGOC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAHd,EAIiBF,IAJjB,CAIsBG,KAAK,IAAI,CAAC,GAAGG,aAAJ,EAAmBH,KAAnB,EAA0BO,IAA1B,EAJ/B,EAKiBV,IALjB,CAKsBV,QAAQ,CAAC;AACXc,QAAAA,IAAI,EAAElB,WADK;AAEXmB,QAAAA,OAAO,EAAEC;AAFE,OAAD,CAL9B;AAQA,KATD;AAUA;AACE,CA1BE;AA2BP,OAAO,MAAMK,UAAU,GAAIC,IAAD,IAAUtB,QAAQ,IAAI;AAC5C,QAAMI,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAd;AACAC,EAAAA,KAAK,CAACT,GAAG,GAAG,OAAP,EAAgB;AACjByB,IAAAA,MAAM,EAAE,MADS;AAEjBf,IAAAA,OAAO,EAAE;AACLC,MAAAA,aAAa,mBAAYL,KAAZ,CADR;AAEL,sBAAgB;AAFX,KAFQ;AAMjBoB,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,IAAf;AANW,GAAhB,CAAL,CAQCZ,IARD,CAQMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EARb,EASCF,IATD,CASMY,IAAI,IAAItB,QAAQ,CAAC;AACnBc,IAAAA,IAAI,EAAEjB,QADa;AAEnBkB,IAAAA,OAAO,EAAEO;AAFU,GAAD,CATtB;AAaH,CAfM","sourcesContent":["import { FETCH_POSTS, NEW_POST  } from './types'\nimport { API } from '../containers/MainPage'\n\nexport const fetchPosts = () => (dispatch, getState) => {\n        debugger\n\t\tconst { selectedCategories } = getState().categories.selectedCategories;\n\t\tconst token = localStorage.getItem('user-token');\n\t\tif (!selectedCategories) {\n\t\t\tfetch(API + 'posts', {\n\t\t\t\theaders: { Authorization: `Bearer ${token}` }\n\t\t\t})\n\t\t\t\t.then(res => res.json())\n\t\t\t\t.then(posts => dispatch({\n                    type: FETCH_POSTS,\n                    payload: posts\n                }));\n\t\t} else {\n            let selectedPosts = []\n\t\t\tselectedCategories.forEach(category => {\n\t\t\t\tfetch(API + 'categories/' + `${category.value}`, {\n\t\t\t\t\theaders: { Authorization: `Bearer ${token}` }\n\t\t\t\t})\n\t\t\t\t\t.then(res => res.json())\n                    .then(posts => [...selectedPosts, posts].flat())\n                    .then(dispatch({\n                        type: FETCH_POSTS,\n                        payload: selectedPosts}))\n\t\t\t});\n\t\t}\n    };\nexport const createPost = (post) => dispatch => {\n    const token = localStorage.getItem('user-token')\n    fetch(API + 'posts', {\n        method: 'POST',\n        headers: { \n            Authorization: `Bearer ${token}`,\n            'Content-type': 'Application/JSON',\n        },\n        body: JSON.stringify(post)\n    })\n    .then(res => res.json())\n    .then(post => dispatch({\n        type: NEW_POST,\n        payload: post\n    }))\n} "]},"metadata":{},"sourceType":"module"}